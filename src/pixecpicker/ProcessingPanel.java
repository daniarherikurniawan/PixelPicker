/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pixecpicker;

import static pixecpicker.MainFrame.Image;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author daniar heri
 */
public class ProcessingPanel extends ImagePanelBackGround {

    int MaxLabel = 11;
    Vector<JLabel> NameLabel = new Vector<JLabel>();
    Vector<JLabel> ColorLabel = new Vector<JLabel>();
    Vector<JButton> ColorAddButton = new Vector<JButton>();
    Vector<JButton> ColorMarkButton = new Vector<JButton>();
    Vector<JButton> ColorDelButton = new Vector<JButton>();
    Vector<JPanel> ColorPanel = new Vector<JPanel>();
    Vector<JPanel> ContainerPanel = new Vector<JPanel>();
    Vector<Color> color = new Vector<Color>();
    Vector<ImagePixel> MarkedPixel = new Vector<ImagePixel>();
    Vector<ImageRepresentation> ImgRepresentation = new Vector<ImageRepresentation>();

    boolean addAreaByClick = false;
    boolean addAreaByDrag = false;
    int NoAdd = -99;
    int NoShow = -99;
    int NoMagic = 0;
    float TotalPersen = 0;
    int NumberOfLabel = 0;
    public static String pathImage = new String();
    public static int tolerance = 39;
    public BufferedImage Black;
    public BufferedImage Centang;
    public BufferedImage Silang;
    public BufferedImage UndoActive;
    public BufferedImage UndoNonactive;
    public BufferedImage Activated;
    public BufferedImage Deactivated;
    public static int widthImage = 0;
    public static int heightImage = 0;
    public boolean showhint = false;
    public boolean showhint2 = false;
    public boolean draged = false;
    public boolean showhint1 = false;
    public boolean showhint3 = false;
    public boolean IsUndoActive = false;
    public static boolean CaseMemanjang = false;

    Stack<ImagePixel> myStack = new Stack();
    String Top, Down, Side;
    
    boolean first = true;
    int prevX,prevZ, acuanX, acuanZ;
    
    public ProcessingPanel(String path) {
        super(path);
        initComponents();
        Top = new String();
        Down = new String();
        Side = new String();
        prevX = 0; prevZ = 0;
        try {
            Silang = ImageIO.read(new File("img/png/silang.png"));
            Centang = ImageIO.read(new File("img/png/centang.png"));
            Black = ImageIO.read(new File("img/png/Black.png"));
            UndoActive = ImageIO.read(new File("img/png/UndoActive.png"));
            UndoActive = resize(UndoActive, 35, 35);
            UndoNonactive = ImageIO.read(new File("img/png/UndoNonactive.png"));
            UndoNonactive = resize(UndoNonactive, 35, 35);
            Activated = ImageIO.read(new File("img/png/Activated.png"));
            Deactivated = ImageIO.read(new File("img/png/Deactivated.png"));
        } catch (IOException ex) {
            Logger.getLogger(ProcessingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BlackImage1 = new javax.swing.JLabel();
        SebelumAkhir = new javax.swing.JButton();
        SebelumPindahPulau = new javax.swing.JButton();
        SebelumPertama = new javax.swing.JButton();
        StopAdd1 = new javax.swing.JButton();
        ChooserButton = new javax.swing.JButton();
        OriginalImageLabel = new javax.swing.JLabel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1350, 750));

        jPanel1.setOpaque(false);

        BlackImage1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        SebelumAkhir.setBackground(new java.awt.Color(0, 0, 0));
        SebelumAkhir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SebelumAkhir.setForeground(new java.awt.Color(255, 255, 255));
        SebelumAkhir.setText("Akhir");
        SebelumAkhir.setMargin(new java.awt.Insets(2, 10, 2, 10));
        SebelumAkhir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SebelumAkhirMouseClicked(evt);
            }
        });

        SebelumPindahPulau.setBackground(new java.awt.Color(0, 0, 0));
        SebelumPindahPulau.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SebelumPindahPulau.setForeground(new java.awt.Color(255, 255, 255));
        SebelumPindahPulau.setText("Tulis di text");
        SebelumPindahPulau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SebelumPindahPulauMouseClicked(evt);
            }
        });

        SebelumPertama.setBackground(new java.awt.Color(0, 0, 0));
        SebelumPertama.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SebelumPertama.setForeground(new java.awt.Color(255, 255, 255));
        SebelumPertama.setText("Pertama");
        SebelumPertama.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SebelumPertamaMouseClicked(evt);
            }
        });

        StopAdd1.setBackground(new java.awt.Color(0, 0, 0));
        StopAdd1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        StopAdd1.setForeground(new java.awt.Color(255, 255, 255));
        StopAdd1.setText("EXIT");
        StopAdd1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StopAdd1MouseClicked(evt);
            }
        });

        ChooserButton.setBackground(new java.awt.Color(0, 0, 0));
        ChooserButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ChooserButton.setForeground(new java.awt.Color(255, 255, 255));
        ChooserButton.setText("Choose Image");
        ChooserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChooserButtonMouseClicked(evt);
            }
        });
        ChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SebelumAkhir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ChooserButton)
                            .addComponent(StopAdd1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SebelumPertama)
                                .addGap(22, 22, 22)))
                        .addGap(4, 4, 4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(SebelumPindahPulau, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(430, 430, 430)
                    .addComponent(BlackImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(ChooserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(SebelumPindahPulau, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(StopAdd1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(SebelumPertama)
                .addGap(9, 9, 9)
                .addComponent(SebelumAkhir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(315, 315, 315)
                    .addComponent(BlackImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(21, Short.MAX_VALUE)))
        );

        OriginalImageLabel.setBackground(new java.awt.Color(153, 153, 255));
        OriginalImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OriginalImageLabel.setDoubleBuffered(true);
        OriginalImageLabel.setInheritsPopupMenu(false);
        OriginalImageLabel.setOpaque(true);
        OriginalImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OriginalImageLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OriginalImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(459, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(OriginalImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //support for GIF, PNG, JPEG, BMP, and WBMP
    private void ChooserButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChooserButtonMouseClicked
        fileChooserClicked();
    }//GEN-LAST:event_ChooserButtonMouseClicked

    private void StopAdd1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StopAdd1MouseClicked
        System.exit(0);
    }//GEN-LAST:event_StopAdd1MouseClicked
    /*
      if (SebelumPindahPulau.isEnabled()) {
                 try {
                File file = new File("mapitb.txt");
                if (!file.exists()){
                    file.createNewFile();
                }
                // create append
                FileWriter fileWritter = new FileWriter(file.getName(),true);
                BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
                bufferWritter.write("//Top\n"+Top+"\n//Down\n"+Down+"\n//Side\n"+Side+"finish\n\n");
                bufferWritter.close();
                System.out.println("Tulis done");
                Top="";
                Down="";
                Side="";

    */
    private void SebelumPindahPulauMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SebelumPindahPulauMouseClicked
        
        if (SebelumPindahPulau.isEnabled()) {
                 try {
                File file = new File("crossair.txt");
                if (!file.exists()){
                    file.createNewFile();
                }
                // create append
                FileWriter fileWritter = new FileWriter(file.getName(),true);
                BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
                bufferWritter.write(Top);
                bufferWritter.close();
                System.out.println("Tulis done");
                Top="";

            } catch (FileNotFoundException ex) {
                Logger.getLogger(ProcessingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(ProcessingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ProcessingPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SebelumPindahPulauMouseClicked
/*
     int x, z;
        if (!CaseMemanjang) {
            x = evt.getX() - (OriginalImageLabel.getWidth() - widthImage) / 2;
            z = evt.getY();
        } else {
            x = evt.getX();
            z = evt.getY() - (OriginalImageLabel.getHeight() - heightImage) / 2;
        }
        System.out.println(("X "+x+" 100 "+z+" "));
        int high = 30;
        Top += x+" "+high+" "+z+"\n"+x+" "+high+" "+z+" ";
        Down += x+" "+0+" "+z+"\n"+x+" "+0+" "+z+" ";   
        
        Side += x+" "+0+" "+z+" "+x+" "+high+" "+z+"\n";
            
    */
    private void SebelumAkhirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SebelumAkhirMouseClicked
        if (SebelumAkhir.isEnabled()) {
            SebelumPindahPulau.setEnabled(true);
            SebelumAkhir.setEnabled(false);
        }
    }//GEN-LAST:event_SebelumAkhirMouseClicked
    boolean firstbanget = false;
    boolean akhir = false;
    boolean pindahpulau = false;
    
    public void tandaiTitik(int x, int y){
        
    }
    private Color newColor = new Color(255, 0, 0);
    
    private void OriginalImageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OriginalImageLabelMouseClicked
        int x, z;
        if (!CaseMemanjang) {
            x = evt.getX() - (OriginalImageLabel.getWidth() - widthImage) / 2;
            z = evt.getY();
        } else {
            x = evt.getX();
            z = evt.getY() - (OriginalImageLabel.getHeight() - heightImage) / 2;
        }
            acuanX = 351;
            acuanZ = 353;
            first = false;
//  322 236   
            int xx = (x-acuanX);
            int zz = (z-acuanZ);
            System.out.println(("X "+xx+"  "+zz+" "));
            Top += " "+xx+" "+zz+" 255 255 255";
            Top += "\nL "+xx+" "+zz;
        
        tandaiTitik(x, z);
        
        for (int i = x  ; i < x+2 ; i++){
            for (int j = z ; j < z+2 ; j++){
                MainFrame.Image.setRGB(i, j, newColor.getRGB());
            }
        }
        ShowOriginalImage();
            System.out.println(("X dsvsd "));
       
    }//GEN-LAST:event_OriginalImageLabelMouseClicked

    private void SebelumPertamaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SebelumPertamaMouseClicked
        // TODO add your handling code here:
        firstbanget = true;
        
    }//GEN-LAST:event_SebelumPertamaMouseClicked

    private void ChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooserButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChooserButtonActionPerformed

    private float presentaseAwal = 0;
    public void UpdateSizeAfterUndo() {
        float presentase = (float) ImgRepresentation.elementAt(NoMagic).CurrentArea / (widthImage * heightImage) * 100;
        ColorLabel.elementAt(NoMagic).setText(new DecimalFormat("##.##").format(presentase) + " %");
    }


    static BufferedImage deepCopy(BufferedImage bi) {
        ColorModel cm = bi.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = bi.copyData(null);
        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
    }


    public static BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }

    public void ShowOriginalImage() {
        OriginalImageLabel.removeAll();
        OriginalImageLabel.setIcon(new ImageIcon(MainFrame.Image));
        OriginalImageLabel.repaint();
    }


    private void fileChooserClicked() {
        FileDialog fd = new FileDialog(new Frame(), "Choose an image file", FileDialog.LOAD);
        fd.setVisible(true);
        File f = new File(fd.getDirectory() + fd.getFile());

        try {
            pathImage = fd.getDirectory() + fd.getFile();
            MainFrame.Image = ImageIO.read(new File(pathImage));

            float w = 0, h = 0;
            float scaleLabel = (float) OriginalImageLabel.getWidth() / OriginalImageLabel.getHeight();
            float scaleImage = (float) MainFrame.Image.getWidth() / MainFrame.Image.getHeight();
            CaseMemanjang = true;
            w = OriginalImageLabel.getWidth();
            h = (float) OriginalImageLabel.getWidth() / MainFrame.Image.getWidth() * MainFrame.Image.getHeight();
            MainFrame.Image = resize(MainFrame.Image, (int) w, (int) h);
            ShowOriginalImage();
            System.out.println(w + "  I mage error  " + h);
            widthImage = (int) w;
            heightImage = (int) h;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Pilihlah gambar yang valid!", "Information", JOptionPane.ERROR_MESSAGE);
            System.out.println("Image error");
        }

    }


    public static BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BlackImage1;
    private javax.swing.JButton ChooserButton;
    public static javax.swing.JLabel OriginalImageLabel;
    private javax.swing.JButton SebelumAkhir;
    private javax.swing.JButton SebelumPertama;
    private javax.swing.JButton SebelumPindahPulau;
    private javax.swing.JButton StopAdd1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
